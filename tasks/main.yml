---
- name: Ensure volume mount
  mount:
    fstype: ext4
    name: /data
    src: "{{ volume_device }}"
    dump: 1
    passno: 2
    state: mounted
  when: volume_device is defined

- include: debian.yml
  when: ansible_distribution == 'Debian'

- name: Check if ruby is installed
  stat:
    path: /usr/local/lib/ruby/gems/{{ ruby_version.split('-')[0] }}
  register: ruby

- name: Install ruby from source
  include: ruby.yml
  when: not ruby.stat.exists

- name: Ensure path to git user home
  file:
    path: "{{ '/'.join(git_user_home.split('/')[:-1]) }}"
    state: directory

- name: Add git user
  user:
    name: "{{ git_user_name }}"
    home: "{{ git_user_home }}"
    comment: GitLab
    state: present

- include: redis.yml

- include: alt_ssh.yml
  when: ssh_port != 22

- name: Enable SSH_AUTH_SOCK on sudo calls
  copy:
    src: ssh_auth_sock
    dest: /etc/sudoers.d/ssh_auth_sock
    validate: 'visudo -cf %s'
    owner: root
    group: root
    mode: 0440

- name: Get gitlab
  git:
    dest: "/tmp/gitlab"
    repo: "{{ gitlab_source }}"
    version: "{{ gitlab_version }}"
    ssh_opts: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
  tags:
    - redeploy

- name: Stop gitlab
  service:
    name: gitlab
    state: stopped
  register: result
  failed_when: "result.failed is defined and result.msg is defined and 'service not found' not in result.msg"
  tags:
    - redeploy

- name: Move gitlab to its final location
  command: "mv /tmp/gitlab {{ git_user_home }}"
  tags:
    - redeploy

- name: Remove temporary gitlab code
  file:
    path: /tmp/gitlab
    state: absent
  tags:
    - redeploy

- name: Ensure gitlab ownership
  file:
    path: "{{ git_user_home }}/gitlab"
    owner: "{{ git_user_name }}"
    group: "{{ git_user_name }}"
    recurse: yes
    state: directory
  tags:
    - redeploy

- name: Upload gitlab configuration
  template:
    src: templates/gitlab.yml
    dest: "{{ git_user_home}}/gitlab/config"
    owner: "{{ git_user_name }}"
    group: "{{ git_user_name }}"
    mode: 0644
  tags:
    - redeploy

- name: Create satellites directory
  file:
    dest: "{{ git_user_home }}/gitlab-satellites"
    owner: "{{ git_user_name }}"
    mode: 0750
    state: directory
  tags:
    - redeploy

- name: Copy the Unicorn config file
  command: cp config/unicorn.rb.example config/unicorn.rb
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Fine tune the Unicorn config file
  lineinfile:
    dest: "{{ git_user_home }}/gitlab/config/unicorn.rb"
    backrefs: yes
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^(worker_processes).*', line: '\1 {{ ansible_processor_cores + 1 }}' }
    - { regexp: '^(working_directory).*', line: '\1 "{{ git_user_home }}/gitlab"' }
    - { regexp: '^(listen\ ).+gitlab.socket"(.+)', line: '\1 "{{ git_user_home }}/gitlab/tmp/sockets/gitlab.socket"\2' }
    - { regexp: '^(pid).*', line: '\1 "{{ git_user_home }}/gitlab/tmp/pids/unicorn.pid"' }
    - { regexp: '^(stderr_path).*', line: '\1 "{{ git_user_home }}/gitlab/log/unicorn.stderr.pid"' }
    - { regexp: '^(stdout_path).*', line: '\1 "{{ git_user_home }}/gitlab/log/unicorn.stdout.pid"' }
  tags:
    - redeploy

- name: Copy the Rack attack config file
  command: cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Configure git settings
  command: git config --global {{ item }}
  sudo_user: "{{ git_user_name }}"
  with_items:
    - 'user.name "GitLab"'
    - 'user.email "gitlab@{{ web_domain }}"'
    - 'core.autocrlf input'
  tags:
    - redeploy

- name: Copy the Redis connection settings file
  command: cp config/resque.yml.example config/resque.yml
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Copy the database config file
  command: cp config/database.yml.postgresql config/database.yml
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Configure database credentials
  lineinfile:
    dest: "{{ git_user_home }}/gitlab/config/database.yml"
    backrefs: yes
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^(\s*)#\ (username:).*', line: '\1\2 {{ gitlab_db_user }}' }
    - { regexp: '^(\s*)#\ (password:).*', line: '\1\2 {{ gitlab_db_pass }}' }
    - { regexp: '^(\s*)#\ (host:).*', line: '\1\2 {{ gitlab_db_host }}' }
    - { regexp: '^(\s*database:\ )gitlabhq_production.*', line: '\1{{ gitlab_db }}' }
  tags:
    - redeploy

- name: Ensure database config permissions
  file:
    dest: "{{ git_user_home }}/gitlab/config/database.yml"
    owner: "{{ git_user_name }}"
    mode: 0750
  tags:
    - redeploy

- name: Install gems
  command: bundle install -j{{ ansible_processor_cores }} --deployment --without development test mysql aws
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Install GitLab Shell
  command: bundle exec rake gitlab:shell:install[{{ gitlab_shell_version }}] REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production
    chdir={{ git_user_home }}/gitlab
  sudo_user: "{{ git_user_name }}"
  tags:
    - redeploy

- name: Reconfigure gitlab-shell
  lineinfile:
    dest: "{{ git_user_home }}/gitlab-shell/config.yml"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  sudo_user: "{{ git_user_name }}"
  with_items:
    - { regexp: '^(gitlab_url:)( \"http://)', line: '\1 "https://{{ web_domain }}/"' }
    - { regexp: '^(user:\ ).+', line: '\1{{ git_user_name }}' }
    - { regexp: '^(repos_path:\ ).+', line: '\1"{{ git_user_home }}/repositories"' }
    - { regexp: '^(auth_file:\ ).+', line: '\1"{{ git_user_home }}/.ssh/authorized_keys"' }
  tags:
    - redeploy

- name: Install init.d script
  command: cp lib/support/init.d/gitlab /etc/init.d/gitlab
    chdir={{ git_user_home }}/gitlab

- name: Upload gitlab defaults
  template:
    src: gitlab.default.j2
    dest: /etc/default/gitlab
    owner: root
    group: root
    mode: 0755

- name: Add gitlab to startup pipeline
  command: update-rc.d gitlab defaults 21

- name: Setup logrotate
  command: cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab
    chdir={{ git_user_home }}/gitlab

- name: Configure nginx
  command: cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab
    chdir={{ git_user_home }}/gitlab
    creates=/etc/nginx/sites-available/gitlab
  notify: restart nginx

- name: Fine tune nginx
  lineinfile:
    dest: /etc/nginx/sites-available/gitlab
    backrefs: yes
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^(\s*server\ unix\:).+(/gitlab/tmp/sockets/gitlab.socket;)', line: '\1{{ git_user_home }}\2' }
  notify: restart nginx

- name: Enable gitlab nginx config
  file:
    src: /etc/nginx/sites-available/gitlab
    dest: /etc/nginx/sites-enabled/gitlab
    state: link
  notify: restart nginx
